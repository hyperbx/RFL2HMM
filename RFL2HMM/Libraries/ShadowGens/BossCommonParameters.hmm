Library "BossCommonParameters"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct BossResourceInfo
    {
        [FieldOffset(0x00)] public UnmanagedString modelName;
        [FieldOffset(0x10)] public UnmanagedString animName;
        [FieldOffset(0x20)] public Vector3 scale;
        [FieldOffset(0x30)] public UnmanagedString stageName;
        [FieldOffset(0x40)] public Vector3 stagePos;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct HoldPoint
    {
        [FieldOffset(0x00)] public UnmanagedString nodeName;
        [FieldOffset(0x10)] public Vector3 offset;
        [FieldOffset(0x20)] public Vector3 rot;
        [FieldOffset(0x30)] public UnmanagedString tagName;
        [FieldOffset(0x40)] public int nextPointId;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2800)]
    public struct HoldPointParameter
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* HoldPoint[128] */ _holdPoints[10240];

        public unsafe HoldPoint* holdPoints
        {
            get
            {
                fixed (byte* p_holdPoints = _holdPoints)
                    return (HoldPoint*)p_holdPoints;
            }
        }
    }

    public enum Shape : sbyte
    {
        SHAPE_SPHERER = 0,
        SHAPE_BOX = 1,
        SHAPE_CYLINDER = 2,
        SHAPE_CAPCULE = 3
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x60)]
    public struct CollisionPart
    {
        [FieldOffset(0x00)] public UnmanagedString nodeName;
        [FieldOffset(0x10)] public Shape shape;
        [FieldOffset(0x11)] public bool isPhysics;
        [FieldOffset(0x20)] public Vector3 size;
        [FieldOffset(0x30)] public Vector3 offset;
        [FieldOffset(0x40)] public Vector3 rot;
        [FieldOffset(0x50)] public UnmanagedString tagName;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xC00)]
    public struct CollisionPartParameter
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* CollisionPart[32] */ _colParts[3072];

        public unsafe CollisionPart* colParts
        {
            get
            {
                fixed (byte* p_colParts = _colParts)
                    return (CollisionPart*)p_colParts;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3450)]
    public struct BossCommonParameters
    {
        [FieldOffset(0x00)] public BossResourceInfo resource;
        [FieldOffset(0x50)] public HoldPointParameter holdParam;
        [FieldOffset(0x2850)] public CollisionPartParameter colParam;
    }

}