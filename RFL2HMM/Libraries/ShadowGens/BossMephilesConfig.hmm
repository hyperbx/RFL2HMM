Library "BossMephilesConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct BossMephilesFixedCamera
    {
        [FieldOffset(0x00)] public Vector3 eyeLocalOffset;
        [FieldOffset(0x10)] public Vector3 lookAtLocalOffset;
        [FieldOffset(0x20)] public float fov;
        [FieldOffset(0x24)] public float roll;
        [FieldOffset(0x28)] public float easeInTime;
        [FieldOffset(0x2C)] public float easeOutTime;
        [FieldOffset(0x30)] public float keepTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xB0)]
    public struct BossMephilesDBlowHitParam
    {
        [FieldOffset(0x00)] public float VerticalPowerRatio;
        [FieldOffset(0x04)] public float VerticalSpeedKeepTime;
        [FieldOffset(0x08)] public float VerticalSpeedDecelTime;
        [FieldOffset(0x0C)] public float HorizontalPowerRatio;
        [FieldOffset(0x10)] public float HorizontalSpeedKeepTime;
        [FieldOffset(0x14)] public float HorizontalSpeedDecelTime;
        [FieldOffset(0x18)] public int wallHitDamage;
        [FieldOffset(0x1C)] public float waitTime;
        [FieldOffset(0x20)] public BossMephilesFixedCamera bombHitCamera;
        [FieldOffset(0x60)] public BossMephilesFixedCamera blowDownCamera;
        [FieldOffset(0xA0)] public float blowDownCameraDelay;
        [FieldOffset(0xA4)] public float blowDownWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct BossMephilesWarpStatusData
    {
        [FieldOffset(0x00)] public bool isEnable;
        [FieldOffset(0x04)] public float damageTime;
        [FieldOffset(0x08)] public float counterAtkWaitTime;
        [FieldOffset(0x0C)] public float warpedWaitTime;
        [FieldOffset(0x10)] public bool isDBlow;
        [FieldOffset(0x11)] public bool isCounter;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x190)]
    public struct BossMephilesWarpStatusTable
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossMephilesWarpStatusData[20] */ _warpDatas[400];

        public unsafe BossMephilesWarpStatusData* warpDatas
        {
            get
            {
                fixed (byte* p_warpDatas = _warpDatas)
                    return (BossMephilesWarpStatusData*)p_warpDatas;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xC0)]
    public struct BossMephilesWarpCameraAndPosition
    {
        [FieldOffset(0x00)] public BossMephilesFixedCamera warpCamera;
        [FieldOffset(0x40)] public unsafe fixed byte /* Vector3[8] */ _warpPositions[128];

        public unsafe Vector3* warpPositions
        {
            get
            {
                fixed (byte* p_warpPositions = _warpPositions)
                    return (Vector3*)p_warpPositions;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xE50)]
    public struct BossMephilesWarpParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossMephilesWarpStatusTable[4] */ _warpTable[1600];

        public unsafe BossMephilesWarpStatusTable* warpTable
        {
            get
            {
                fixed (byte* p_warpTable = _warpTable)
                    return (BossMephilesWarpStatusTable*)p_warpTable;
            }
        }

        [FieldOffset(0x640)] public unsafe fixed byte /* BossMephilesWarpStatusTable[4] */ _warpTableByHard[1600];

        public unsafe BossMephilesWarpStatusTable* warpTableByHard
        {
            get
            {
                fixed (byte* p_warpTableByHard = _warpTableByHard)
                    return (BossMephilesWarpStatusTable*)p_warpTableByHard;
            }
        }

        [FieldOffset(0xC80)] public float warpDistanceByNormal;
        [FieldOffset(0xC84)] public float warpDistanceByCounter;
        [FieldOffset(0xC88)] public int useTableIndexMax;
        [FieldOffset(0xC90)] public BossMephilesFixedCamera counterCamera;
        [FieldOffset(0xCD0)] public unsafe fixed byte /* BossMephilesWarpCameraAndPosition[2] */ _warpPattern[384];

        public unsafe BossMephilesWarpCameraAndPosition* warpPattern
        {
            get
            {
                fixed (byte* p_warpPattern = _warpPattern)
                    return (BossMephilesWarpCameraAndPosition*)p_warpPattern;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2C)]
    public struct BossMephilesCameraExtensionParam
    {
        [FieldOffset(0x00)] public float addDistance;
        [FieldOffset(0x04)] public float addElevationOffset;
        [FieldOffset(0x08)] public float addTargetUpOffset;
        [FieldOffset(0x0C)] public float addTargetFrontOffset;
        [FieldOffset(0x10)] public float addLookatUpOffset;
        [FieldOffset(0x14)] public float addLookatWorldUpOffset;
        [FieldOffset(0x18)] public float addAzimuthOffset;
        [FieldOffset(0x1C)] public bool isDisableAvoidance;
        [FieldOffset(0x20)] public float time;
        [FieldOffset(0x24)] public float easeIn;
        [FieldOffset(0x28)] public float easeOut;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xFC0)]
    public struct BossMephilesCommonParam
    {
        [FieldOffset(0x00)] public BossMephilesDBlowHitParam dBlow;
        [FieldOffset(0xB0)] public BossMephilesWarpParam warp;
        [FieldOffset(0xF00)] public float battleAwayTime;
        [FieldOffset(0xF04)] public unsafe fixed int cumulativeDamageLimits[4];
        [FieldOffset(0xF14)] public unsafe fixed int cumulativeDamageLimitsByHard[4];
        [FieldOffset(0xF24)] public unsafe fixed float spearDamageWaitTimes[4];
        [FieldOffset(0xF40)] public BossMephilesFixedCamera spearDamageCamera;
        [FieldOffset(0xF80)] public BossMephilesCameraExtensionParam exStageOutSideCamera;
        [FieldOffset(0xFAC)] public float stageOutSideDistance;
        [FieldOffset(0xFB0)] public float stageOutSideMargin;
    }

    public enum ActionType : sbyte
    {
        INVALID_ACTION = 0,
        PHASE1_IDLE = 1,
        PHASE1_MINION = 2,
        PHASE1_BLADE = 3,
        PHASE1_DEMON = 4,
        PHASE2_IDLE = 5,
        ACTION_TYPE_NUM = 6
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct BossMephilesActionData
    {
        [FieldOffset(0x00)] public ActionType actionType;
        [FieldOffset(0x04)] public float time;
        [FieldOffset(0x08)] public int attackIndex;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x490)]
    public struct BossMephilesPhaseParam
    {
        [FieldOffset(0x00)] public int lifeCount;
        [FieldOffset(0x04)] public int healthPoint;
        [FieldOffset(0x08)] public int healthPointByHard;
        [FieldOffset(0x0C)] public int useTableIndexMax;
        [FieldOffset(0x10)] public unsafe fixed byte /* BossMephilesActionData[24] */ _actionTable1[288];

        public unsafe BossMephilesActionData* actionTable1
        {
            get
            {
                fixed (byte* p_actionTable1 = _actionTable1)
                    return (BossMephilesActionData*)p_actionTable1;
            }
        }

        [FieldOffset(0x130)] public unsafe fixed byte /* BossMephilesActionData[24] */ _actionTable2[288];

        public unsafe BossMephilesActionData* actionTable2
        {
            get
            {
                fixed (byte* p_actionTable2 = _actionTable2)
                    return (BossMephilesActionData*)p_actionTable2;
            }
        }

        [FieldOffset(0x250)] public unsafe fixed byte /* BossMephilesActionData[24] */ _actionTable3[288];

        public unsafe BossMephilesActionData* actionTable3
        {
            get
            {
                fixed (byte* p_actionTable3 = _actionTable3)
                    return (BossMephilesActionData*)p_actionTable3;
            }
        }

        [FieldOffset(0x370)] public unsafe fixed byte /* BossMephilesActionData[24] */ _actionTable4[288];

        public unsafe BossMephilesActionData* actionTable4
        {
            get
            {
                fixed (byte* p_actionTable4 = _actionTable4)
                    return (BossMephilesActionData*)p_actionTable4;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct BossMephilesPhase1StatusTable
    {
        [FieldOffset(0x00)] public float amoebaMoveSpeed;
        [FieldOffset(0x04)] public float amoebaMoveAccel;
        [FieldOffset(0x08)] public float amoebaMoveAngle;
        [FieldOffset(0x0C)] public float amoebaEscapeDistance;
        [FieldOffset(0x10)] public float amoebaPatrolSpeed;
        [FieldOffset(0x14)] public float amoebaPatrolDistance;
        [FieldOffset(0x18)] public float hideEndWait;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x130)]
    public struct BossMephilesPhase1Status
    {
        [FieldOffset(0x00)] public float floatingHeight;
        [FieldOffset(0x04)] public float initIdleTime;
        [FieldOffset(0x08)] public float idleTime;
        [FieldOffset(0x0C)] public float amoebaHitRadius;
        [FieldOffset(0x10)] public unsafe fixed byte /* BossMephilesPhase1StatusTable[4] */ _statusTable[112];

        public unsafe BossMephilesPhase1StatusTable* statusTable
        {
            get
            {
                fixed (byte* p_statusTable = _statusTable)
                    return (BossMephilesPhase1StatusTable*)p_statusTable;
            }
        }

        [FieldOffset(0x80)] public unsafe fixed byte /* BossMephilesPhase1StatusTable[4] */ _statusTableByHard[112];

        public unsafe BossMephilesPhase1StatusTable* statusTableByHard
        {
            get
            {
                fixed (byte* p_statusTableByHard = _statusTableByHard)
                    return (BossMephilesPhase1StatusTable*)p_statusTableByHard;
            }
        }

        [FieldOffset(0xF0)] public BossMephilesFixedCamera hideEndCamera;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct BossMephilesMinionTable
    {
        [FieldOffset(0x00)] public int num;
        [FieldOffset(0x04)] public int amoebaMinionNum;
        [FieldOffset(0x08)] public int attackNum;
        [FieldOffset(0x0C)] public int attackCycle;
        [FieldOffset(0x10)] public float attackInitDelayNormal;
        [FieldOffset(0x14)] public float attackInitDelayAmoeba;
        [FieldOffset(0x18)] public float attackDelayNormal;
        [FieldOffset(0x1C)] public float attackDelayAmoeba;
        [FieldOffset(0x20)] public float time;
        [FieldOffset(0x24)] public int amoebaLotCycle;
        [FieldOffset(0x28)] public int amoebaLotValue;
        [FieldOffset(0x2C)] public int ringNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1E0)]
    public struct BossMephilesAttackMinion
    {
        [FieldOffset(0x00)] public float spawnRadiusMin;
        [FieldOffset(0x04)] public float spawnRadiusMax;
        [FieldOffset(0x08)] public float moveRadiusMin;
        [FieldOffset(0x0C)] public float moveRadiusMax;
        [FieldOffset(0x10)] public float moveDegree;
        [FieldOffset(0x14)] public float shakeDegree;
        [FieldOffset(0x18)] public float shakeSpeed;
        [FieldOffset(0x1C)] public float heightRatio;
        [FieldOffset(0x20)] public float attackSpeedNormal;
        [FieldOffset(0x24)] public float attackSpeedAmoeba;
        [FieldOffset(0x28)] public float attackSpeedNormalByHard;
        [FieldOffset(0x2C)] public float attackSpeedAmoebaByHard;
        [FieldOffset(0x30)] public float amoebaTargetActiveTime;
        [FieldOffset(0x34)] public unsafe fixed byte /* BossMephilesMinionTable[4] */ _minionTable[192];

        public unsafe BossMephilesMinionTable* minionTable
        {
            get
            {
                fixed (byte* p_minionTable = _minionTable)
                    return (BossMephilesMinionTable*)p_minionTable;
            }
        }

        [FieldOffset(0xF4)] public unsafe fixed byte /* BossMephilesMinionTable[4] */ _minionTableByHard[192];

        public unsafe BossMephilesMinionTable* minionTableByHard
        {
            get
            {
                fixed (byte* p_minionTableByHard = _minionTableByHard)
                    return (BossMephilesMinionTable*)p_minionTableByHard;
            }
        }

        [FieldOffset(0x1B4)] public BossMephilesCameraExtensionParam exCamera;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct BossMephilesBladeTable
    {
        [FieldOffset(0x00)] public int num;
        [FieldOffset(0x04)] public int attackNum;
        [FieldOffset(0x08)] public int amoebaSpawnIdx1;
        [FieldOffset(0x0C)] public int amoebaSpawnIdx2;
        [FieldOffset(0x10)] public int amoebaSpawnIdx3;
        [FieldOffset(0x14)] public float aimSpeed;
        [FieldOffset(0x18)] public float aimTime;
        [FieldOffset(0x1C)] public float assaultSpeed;
        [FieldOffset(0x20)] public float time;
        [FieldOffset(0x24)] public float amoebaTargetActiveTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x16C)]
    public struct BossMephilesAttackBlade
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossMephilesBladeTable[4] */ _bladeTable[160];

        public unsafe BossMephilesBladeTable* bladeTable
        {
            get
            {
                fixed (byte* p_bladeTable = _bladeTable)
                    return (BossMephilesBladeTable*)p_bladeTable;
            }
        }

        [FieldOffset(0xA0)] public unsafe fixed byte /* BossMephilesBladeTable[4] */ _bladeTableByHard[160];

        public unsafe BossMephilesBladeTable* bladeTableByHard
        {
            get
            {
                fixed (byte* p_bladeTableByHard = _bladeTableByHard)
                    return (BossMephilesBladeTable*)p_bladeTableByHard;
            }
        }

        [FieldOffset(0x140)] public BossMephilesCameraExtensionParam exCamera;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x24)]
    public struct BossMephilesLockonCameraParam
    {
        [FieldOffset(0x00)] public bool enable;
        [FieldOffset(0x04)] public float distance;
        [FieldOffset(0x08)] public float minElevation;
        [FieldOffset(0x0C)] public float maxElevation;
        [FieldOffset(0x10)] public float panningSuspensionK;
        [FieldOffset(0x14)] public float interiorPanningSuspensionK;
        [FieldOffset(0x18)] public float time;
        [FieldOffset(0x1C)] public float easeInTime;
        [FieldOffset(0x20)] public float easeOutTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x530)]
    public struct BossMephilesPhase1Param
    {
        [FieldOffset(0x00)] public BossMephilesPhase1Status status;
        [FieldOffset(0x130)] public BossMephilesAttackMinion minion;
        [FieldOffset(0x310)] public BossMephilesAttackBlade blade;
        [FieldOffset(0x47C)] public BossMephilesCameraExtensionParam exCameraInit;
        [FieldOffset(0x4A8)] public BossMephilesCameraExtensionParam exCameraDamage;
        [FieldOffset(0x4D4)] public BossMephilesCameraExtensionParam exCameraHideChase;
        [FieldOffset(0x500)] public BossMephilesLockonCameraParam lockonCamera;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct BossMephilesPhase2StageLayerParam
    {
        [FieldOffset(0x00)] public UnmanagedString layerName;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct BossMephilesDemonHandAttack
    {
        [FieldOffset(0x00)] public float reactionTime;
        [FieldOffset(0x04)] public float range;
        [FieldOffset(0x08)] public float rangeOffset;
        [FieldOffset(0x0C)] public float wavePointOffset;
        [FieldOffset(0x10)] public float waveRadus;
        [FieldOffset(0x14)] public float waveDelay;
        [FieldOffset(0x18)] public float waveTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1DC)]
    public struct BossMephilesAttackDemon
    {
        [FieldOffset(0x00)] public int lifeCountMax;
        [FieldOffset(0x04)] public int lifeCountMaxByHard;
        [FieldOffset(0x08)] public int hp;
        [FieldOffset(0x0C)] public int hpByHard;
        [FieldOffset(0x10)] public unsafe fixed int shieldHp[4];
        [FieldOffset(0x20)] public unsafe fixed float rotAnimSpeedRatios[4];
        [FieldOffset(0x30)] public float hideMoveSpeed;
        [FieldOffset(0x34)] public float rotSpeedNormal;
        [FieldOffset(0x38)] public float rotSpeedAttack;
        [FieldOffset(0x3C)] public float rotSpeedHide;
        [FieldOffset(0x40)] public float waitTimeInit;
        [FieldOffset(0x44)] public unsafe fixed float waitTimes[4];
        [FieldOffset(0x54)] public unsafe fixed float waitTimesByHard[4];
        [FieldOffset(0x64)] public float hideTime;
        [FieldOffset(0x68)] public float hideAttackRangeMin;
        [FieldOffset(0x6C)] public float hideAttackRange;
        [FieldOffset(0x70)] public float hideAttackColRadius;
        [FieldOffset(0x74)] public float hideAttackDelay;
        [FieldOffset(0x78)] public float hideMoveMarginDistance;
        [FieldOffset(0x7C)] public float hideEndDistance;
        [FieldOffset(0x80)] public unsafe fixed float laserTimes[4];
        [FieldOffset(0x90)] public unsafe fixed float laserAimSpeeds[4];
        [FieldOffset(0xA0)] public int amoebaTargetNum;
        [FieldOffset(0xA4)] public float amoebaTargetActiveTime;
        [FieldOffset(0xA8)] public float amoebaTargetSpawnDistanceCycle;
        [FieldOffset(0xAC)] public int dropRingNum;
        [FieldOffset(0xB0)] public int dropRingNumByHard;
        [FieldOffset(0xB4)] public float dropRingTime;
        [FieldOffset(0xB8)] public float finishLaunchPower;
        [FieldOffset(0xBC)] public float finishCameraLookAtHeight;
        [FieldOffset(0xC0)] public float finishBreakFakerCreateTime;
        [FieldOffset(0xC4)] public float finishBreakedMessageDelayTime;
        [FieldOffset(0xC8)] public float fakerAppearMoveTime;
        [FieldOffset(0xCC)] public float fakerAppearMoveUpRatio;
        [FieldOffset(0xD0)] public BossMephilesDemonHandAttack handAttack;
        [FieldOffset(0xEC)] public BossMephilesDemonHandAttack handAttackByHard;
        [FieldOffset(0x108)] public BossMephilesLockonCameraParam lockonCamera;
        [FieldOffset(0x12C)] public BossMephilesCameraExtensionParam exHideAttack;
        [FieldOffset(0x158)] public BossMephilesCameraExtensionParam exHideMove;
        [FieldOffset(0x184)] public BossMephilesCameraExtensionParam exLaser;
        [FieldOffset(0x1B0)] public BossMephilesCameraExtensionParam exDamage;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xF0)]
    public struct BossMephilesAttackPillar
    {
        [FieldOffset(0x00)] public float initStartDelay;
        [FieldOffset(0x04)] public float startDelay;
        [FieldOffset(0x08)] public float startDelayByHard;
        [FieldOffset(0x0C)] public float addStartDelay;
        [FieldOffset(0x10)] public float readyTime;
        [FieldOffset(0x14)] public float fallTime;
        [FieldOffset(0x18)] public float waitTime;
        [FieldOffset(0x1C)] public float waitTimeByHard;
        [FieldOffset(0x20)] public float riseTime;
        [FieldOffset(0x24)] public float launchSpeed;
        [FieldOffset(0x28)] public float launchSpeedByHard;
        [FieldOffset(0x2C)] public float launchSpeedKeepTime;
        [FieldOffset(0x30)] public float launchOutOfControlTime;
        [FieldOffset(0x34)] public float leanAngle;
        [FieldOffset(0x38)] public float leanTime;
        [FieldOffset(0x3C)] public int amoebaTargetNum;
        [FieldOffset(0x40)] public float amoebaTargetDelay;
        [FieldOffset(0x44)] public float amoebaTargetDistance;
        [FieldOffset(0x48)] public float waveRadius;
        [FieldOffset(0x4C)] public float waveDelay;
        [FieldOffset(0x50)] public float waveTime;
        [FieldOffset(0x54)] public float waveTimeByHard;
        [FieldOffset(0x58)] public float cameraHeightMin;
        [FieldOffset(0x5C)] public float cameraHeightMax;
        [FieldOffset(0x60)] public float cameraLookUpDelay;
        [FieldOffset(0x64)] public float cameraLookUpEaseTime;
        [FieldOffset(0x68)] public float cameraLookUpKeepTime;
        [FieldOffset(0x6C)] public float cameraReturnTime;
        [FieldOffset(0x70)] public UnmanagedString layerName;
        [FieldOffset(0x80)] public UnmanagedString endOffLayerName;
        [FieldOffset(0x90)] public BossMephilesFixedCamera fixedCamera;
        [FieldOffset(0xD0)] public float fixedCameraStartDelay;
        [FieldOffset(0xD4)] public float firstReactionStartDelay;
        [FieldOffset(0xD8)] public float firstReactionEndDelay;
        [FieldOffset(0xDC)] public float firstMoveTime;
        [FieldOffset(0xE0)] public float firstUpRatio;
        [FieldOffset(0xE4)] public float pillarCreateDelay;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct BossMephilesAttackFaker
    {
        [FieldOffset(0x00)] public int num;
        [FieldOffset(0x04)] public int numByHard;
        [FieldOffset(0x08)] public int spBreakNum;
        [FieldOffset(0x0C)] public int spBreakActiveNum;
        [FieldOffset(0x10)] public int spBreakNumByHard;
        [FieldOffset(0x14)] public int spBreakActiveNumByHard;
        [FieldOffset(0x18)] public float floatingHeight;
        [FieldOffset(0x1C)] public float initSpawnRaidus;
        [FieldOffset(0x20)] public float initDelay;
        [FieldOffset(0x24)] public float delay;
        [FieldOffset(0x28)] public int breakCountrNum;
        [FieldOffset(0x2C)] public float attackPosRaidus;
        [FieldOffset(0x30)] public float straightAttackHitColRaidus;
        [FieldOffset(0x34)] public float straightAttackSpeed;
        [FieldOffset(0x38)] public float straightDelay;
        [FieldOffset(0x3C)] public float straightAddDelay;
        [FieldOffset(0x40)] public int straightNum;
        [FieldOffset(0x44)] public float straightDelayByHard;
        [FieldOffset(0x48)] public float straightAddDelayByHard;
        [FieldOffset(0x4C)] public int straightNumByHard;
        [FieldOffset(0x50)] public BossMephilesFixedCamera attackCamera;
        [FieldOffset(0x90)] public float soulSpeed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3B0)]
    public struct BossMephilesPhase2Param
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossMephilesPhase2StageLayerParam[4] */ _startActiveLayers[64];

        public unsafe BossMephilesPhase2StageLayerParam* startActiveLayers
        {
            get
            {
                fixed (byte* p_startActiveLayers = _startActiveLayers)
                    return (BossMephilesPhase2StageLayerParam*)p_startActiveLayers;
            }
        }

        [FieldOffset(0x40)] public BossMephilesAttackDemon demon;
        [FieldOffset(0x220)] public BossMephilesAttackPillar pillar;
        [FieldOffset(0x310)] public BossMephilesAttackFaker faker;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x21C0)]
    public struct BossMephilesConfig
    {
        [FieldOffset(0x00)] public BossMephilesCommonParam commonParam;
        [FieldOffset(0xFC0)] public unsafe fixed byte /* BossMephilesPhaseParam[2] */ _phaseParam[2336];

        public unsafe BossMephilesPhaseParam* phaseParam
        {
            get
            {
                fixed (byte* p_phaseParam = _phaseParam)
                    return (BossMephilesPhaseParam*)p_phaseParam;
            }
        }

        [FieldOffset(0x18E0)] public BossMephilesPhase1Param phase1;
        [FieldOffset(0x1E10)] public BossMephilesPhase2Param phase2;
    }

}