Library "BossMetaloverloadConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x38)]
    public struct BossMetaloverloadSwitchLayerData
    {
        [FieldOffset(0x00)] public UnmanagedString layerName;
        [FieldOffset(0x10)] public int phase;
        [FieldOffset(0x14)] public int lifeMin;
        [FieldOffset(0x18)] public int lifeMax;
        [FieldOffset(0x20)] public UnmanagedString tag;
        [FieldOffset(0x30)] public bool isChangePhaseEnable;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x710)]
    public struct BossMetaloverloadCommonParam
    {
        [FieldOffset(0x00)] public float floatHeight;
        [FieldOffset(0x04)] public float upperRotSpeed;
        [FieldOffset(0x08)] public float upperResetRotSpeed;
        [FieldOffset(0x10)] public unsafe fixed byte /* BossMetaloverloadSwitchLayerData[32] */ _switchLayers[1792];

        public unsafe BossMetaloverloadSwitchLayerData* switchLayers
        {
            get
            {
                fixed (byte* p_switchLayers = _switchLayers)
                    return (BossMetaloverloadSwitchLayerData*)p_switchLayers;
            }
        }
    }

    public enum ActionType : sbyte
    {
        INVALID_ACTION = 0,
        PHASE2_IDLE = 1,
        PHASE2_ATTACK_MISSILE = 2,
        PHASE2_ATTACK_SHOT = 3,
        PHASE2_ATTACK_NORMAL_THROWING = 4,
        PHASE2_ATTACK_SP_THROWING = 5,
        PHASE2_RING_POP = 6,
        PHASE2_RING_POP_1 = 7,
        PHASE2_ATTACK_MINE = 8,
        PHASE2_ATTACK_MINE_1 = 9,
        PHASE2_ATTACK_MINE_2 = 10,
        PHASE2_ATTACK_MINE_3 = 11,
        PHASE2_ATTACK_MINE_4 = 12,
        PHASE2_ATTACK_THORNBALL = 13,
        ACTION_TYPE_NUM = 14
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct BossMetaloverloadActionData
    {
        [FieldOffset(0x00)] public ActionType actionType;
        [FieldOffset(0x04)] public float time;
        [FieldOffset(0x08)] public int successSkip;
        [FieldOffset(0x0C)] public int patternIndex;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x110C)]
    public struct BossMetaloverloadPhaseParam
    {
        [FieldOffset(0x00)] public int lifeCount;
        [FieldOffset(0x04)] public int healthPoint;
        [FieldOffset(0x08)] public int healthPointByHard;
        [FieldOffset(0x0C)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable1[544];

        public unsafe BossMetaloverloadActionData* actionTable1
        {
            get
            {
                fixed (byte* p_actionTable1 = _actionTable1)
                    return (BossMetaloverloadActionData*)p_actionTable1;
            }
        }

        [FieldOffset(0x22C)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable2[544];

        public unsafe BossMetaloverloadActionData* actionTable2
        {
            get
            {
                fixed (byte* p_actionTable2 = _actionTable2)
                    return (BossMetaloverloadActionData*)p_actionTable2;
            }
        }

        [FieldOffset(0x44C)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable3[544];

        public unsafe BossMetaloverloadActionData* actionTable3
        {
            get
            {
                fixed (byte* p_actionTable3 = _actionTable3)
                    return (BossMetaloverloadActionData*)p_actionTable3;
            }
        }

        [FieldOffset(0x66C)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable4[544];

        public unsafe BossMetaloverloadActionData* actionTable4
        {
            get
            {
                fixed (byte* p_actionTable4 = _actionTable4)
                    return (BossMetaloverloadActionData*)p_actionTable4;
            }
        }

        [FieldOffset(0x88C)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable1ByHard[544];

        public unsafe BossMetaloverloadActionData* actionTable1ByHard
        {
            get
            {
                fixed (byte* p_actionTable1ByHard = _actionTable1ByHard)
                    return (BossMetaloverloadActionData*)p_actionTable1ByHard;
            }
        }

        [FieldOffset(0xAAC)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable2ByHard[544];

        public unsafe BossMetaloverloadActionData* actionTable2ByHard
        {
            get
            {
                fixed (byte* p_actionTable2ByHard = _actionTable2ByHard)
                    return (BossMetaloverloadActionData*)p_actionTable2ByHard;
            }
        }

        [FieldOffset(0xCCC)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable3ByHard[544];

        public unsafe BossMetaloverloadActionData* actionTable3ByHard
        {
            get
            {
                fixed (byte* p_actionTable3ByHard = _actionTable3ByHard)
                    return (BossMetaloverloadActionData*)p_actionTable3ByHard;
            }
        }

        [FieldOffset(0xEEC)] public unsafe fixed byte /* BossMetaloverloadActionData[34] */ _actionTable4ByHard[544];

        public unsafe BossMetaloverloadActionData* actionTable4ByHard
        {
            get
            {
                fixed (byte* p_actionTable4ByHard = _actionTable4ByHard)
                    return (BossMetaloverloadActionData*)p_actionTable4ByHard;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x2C)]
    public struct BossMetaloverloadPhase1AutorunParam
    {
        [FieldOffset(0x00)] public float speed;
        [FieldOffset(0x04)] public float width;
        [FieldOffset(0x08)] public float bossSpeedMax;
        [FieldOffset(0x0C)] public float bossSpeedMin;
        [FieldOffset(0x10)] public float bossAccelSpeed;
        [FieldOffset(0x14)] public float bossDecelSpeed;
        [FieldOffset(0x18)] public float bossKeepDistanceDefault;
        [FieldOffset(0x1C)] public float bossKeepDistanceLimit;
        [FieldOffset(0x20)] public float bossStanLostDistance;
        [FieldOffset(0x24)] public float bossDefalutDistanceReturnTime;
        [FieldOffset(0x28)] public float bossDefalutDistanceReturnSpeed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct BossBattleLockOnCameraParam
    {
        [FieldOffset(0x00)] public UnmanagedString nodeName;
        [FieldOffset(0x10)] public Vector3 offset;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct BossPointCameraParam
    {
        [FieldOffset(0x00)] public float fovy;
        [FieldOffset(0x04)] public float toPointDistanceMin;
        [FieldOffset(0x08)] public float toPointDistanceMax;
        [FieldOffset(0x0C)] public float distanceMin;
        [FieldOffset(0x10)] public float distanceMax;
        [FieldOffset(0x14)] public float gravityOffsetMin;
        [FieldOffset(0x18)] public float gravityOffsetMax;
        [FieldOffset(0x20)] public Vector3 playerOffsetMin;
        [FieldOffset(0x30)] public Vector3 playerOffsetMax;
        [FieldOffset(0x40)] public Vector3 worldOffsetMin;
        [FieldOffset(0x50)] public Vector3 worldOffsetMax;
        [FieldOffset(0x60)] public Vector3 pointLocalOffsetMin;
        [FieldOffset(0x70)] public Vector3 pointLocalOffsetMax;
        [FieldOffset(0x80)] public UnmanagedString nodeName;
        [FieldOffset(0x90)] public float roll;
        [FieldOffset(0x94)] public float easeInTime;
        [FieldOffset(0x98)] public float easeOutTime;
        [FieldOffset(0x9C)] public float time;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x24)]
    public struct BossMetaloverloadLockonCameraParam
    {
        [FieldOffset(0x00)] public bool enable;
        [FieldOffset(0x04)] public float distance;
        [FieldOffset(0x08)] public float minElevation;
        [FieldOffset(0x0C)] public float maxElevation;
        [FieldOffset(0x10)] public float panningSuspensionK;
        [FieldOffset(0x14)] public float interiorPanningSuspensionK;
        [FieldOffset(0x18)] public float time;
        [FieldOffset(0x1C)] public float easeInTime;
        [FieldOffset(0x20)] public float easeOutTime;
    }

    public enum InputGuideKind : sbyte
    {
        INPUT_GUIDE_KIND_NONE = 0,
        INPUT_GUIDE_KIND_LEFT_STEP = 1,
        INPUT_GUIDE_KIND_RIGHT_STEP = 2,
        INPUT_GUIDE_KIND_JUMP = 3,
        INPUT_GUIDE_KIND_NUM = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct BossMetaloverloadPhase1MissileInfo
    {
        [FieldOffset(0x00)] public sbyte laneNumber;
        [FieldOffset(0x01)] public unsafe fixed bool missileStepsEneble[4];
        [FieldOffset(0x05)] public bool enebleBounce;
        [FieldOffset(0x08)] public float shotTime;
        [FieldOffset(0x0C)] public InputGuideKind inputGuideKind;
        [FieldOffset(0x0D)] public bool isScreenInputGuide;
        [FieldOffset(0x10)] public float screenInputGuideDistance;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x320)]
    public struct BossMetaloverloadPhase1MissilePatternData
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* BossMetaloverloadPhase1MissileInfo[40] */ _missileInfoTabel[800];

        public unsafe BossMetaloverloadPhase1MissileInfo* missileInfoTabel
        {
            get
            {
                fixed (byte* p_missileInfoTabel = _missileInfoTabel)
                    return (BossMetaloverloadPhase1MissileInfo*)p_missileInfoTabel;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1970)]
    public struct BossMetaloverloadPhase1MissileParam
    {
        [FieldOffset(0x00)] public float backwardMoveTime;
        [FieldOffset(0x04)] public float backwardMoveDistance;
        [FieldOffset(0x08)] public float originalPosMoveTime;
        [FieldOffset(0x0C)] public float startWaitTime;
        [FieldOffset(0x10)] public float endWaitTime;
        [FieldOffset(0x14)] public float straightSpeed;
        [FieldOffset(0x18)] public float straightSpeedByHard;
        [FieldOffset(0x1C)] public float curveTime;
        [FieldOffset(0x20)] public float curveTimeByHard;
        [FieldOffset(0x24)] public float blowSpeed;
        [FieldOffset(0x28)] public float laneHeight;
        [FieldOffset(0x2C)] public float lifeTime;
        [FieldOffset(0x30)] public float leaveDistance;
        [FieldOffset(0x34)] public int blowHitDamagePoint;
        [FieldOffset(0x38)] public float blowCurvedTime;
        [FieldOffset(0x3C)] public float blowCurvedYMax;
        [FieldOffset(0x40)] public float floatHeight;
        [FieldOffset(0x44)] public float missileScale;
        [FieldOffset(0x48)] public float stepHeight;
        [FieldOffset(0x4C)] public float colRadius;
        [FieldOffset(0x50)] public float colHeight;
        [FieldOffset(0x60)] public Vector3 colOffset;
        [FieldOffset(0x70)] public unsafe fixed byte /* BossMetaloverloadPhase1MissilePatternData[4] */ _missilePatterns[3200];

        public unsafe BossMetaloverloadPhase1MissilePatternData* missilePatterns
        {
            get
            {
                fixed (byte* p_missilePatterns = _missilePatterns)
                    return (BossMetaloverloadPhase1MissilePatternData*)p_missilePatterns;
            }
        }

        [FieldOffset(0xCF0)] public unsafe fixed byte /* BossMetaloverloadPhase1MissilePatternData[4] */ _missilePatternsByHard[3200];

        public unsafe BossMetaloverloadPhase1MissilePatternData* missilePatternsByHard
        {
            get
            {
                fixed (byte* p_missilePatternsByHard = _missilePatternsByHard)
                    return (BossMetaloverloadPhase1MissilePatternData*)p_missilePatternsByHard;
            }
        }
    }

    public enum Phase1TailAttackType : sbyte
    {
        TAIL_ACT_NONE = 0,
        TAIL_ACT_1 = 1,
        TAIL_ACT_2 = 2,
        TAIL_ACT_3 = 3,
        TAIL_ACT_4 = 4,
        TAIL_ACT_NUM = 5
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x01)]
    public struct BossMetaloverloadPhaseTailInfo
    {
        [FieldOffset(0x00)] public Phase1TailAttackType type;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct BossMetaloverloadPhase1TailPatternData
    {
        [FieldOffset(0x00)] public float attackInterval;
        [FieldOffset(0x04)] public unsafe fixed byte /* BossMetaloverloadPhaseTailInfo[4] */ _tailTypeTabel[4];

        public unsafe BossMetaloverloadPhaseTailInfo* tailTypeTabel
        {
            get
            {
                fixed (byte* p_tailTypeTabel = _tailTypeTabel)
                    return (BossMetaloverloadPhaseTailInfo*)p_tailTypeTabel;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct BossMetaloverloadPhase1TailParam
    {
        [FieldOffset(0x00)] public float frontMoveDistance;
        [FieldOffset(0x04)] public float frontMoveUpPos;
        [FieldOffset(0x08)] public float riseAndFallMotionSpeed;
        [FieldOffset(0x0C)] public float attackMotionSpeed;
        [FieldOffset(0x10)] public float attackIntervalMotionSpeed;
        [FieldOffset(0x14)] public float colliderOffsetHeight;
        [FieldOffset(0x18)] public float floatHeight;
        [FieldOffset(0x1C)] public unsafe fixed byte /* BossMetaloverloadPhase1TailPatternData[4] */ _tailPatterns[32];

        public unsafe BossMetaloverloadPhase1TailPatternData* tailPatterns
        {
            get
            {
                fixed (byte* p_tailPatterns = _tailPatterns)
                    return (BossMetaloverloadPhase1TailPatternData*)p_tailPatterns;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct BossMetaloverloadPhase1FlameParam
    {
        [FieldOffset(0x00)] public float backwardMoveTime;
        [FieldOffset(0x04)] public float backwardMoveDistance;
        [FieldOffset(0x08)] public float floatHeight;
        [FieldOffset(0x0C)] public float originalPosMoveTime;
        [FieldOffset(0x10)] public float startWaitTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x04)]
    public struct BossMetaloverloadPhase1SelfRecoverDebris
    {
        [FieldOffset(0x00)] public int stopPosNo;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct BossMetaloverloadPhase1SelfRecoverParam
    {
        [FieldOffset(0x00)] public float selfRecoverActiveHp;
        [FieldOffset(0x04)] public float recoverHp;
        [FieldOffset(0x08)] public float limitRecoverHp;
        [FieldOffset(0x0C)] public float bossKeepDistance;
        [FieldOffset(0x10)] public float debrisSpeed;
        [FieldOffset(0x14)] public float frontSpeed;
        [FieldOffset(0x18)] public float upSpeed;
        [FieldOffset(0x1C)] public float outOfControlTime;
        [FieldOffset(0x20)] public float keepVelocityTime;
        [FieldOffset(0x24)] public float miniDebrisCreateIntervalTime;
        [FieldOffset(0x28)] public int miniDebrisNum;
        [FieldOffset(0x2C)] public float miniDebrisSpeed;
        [FieldOffset(0x30)] public float floatHeight;
        [FieldOffset(0x34)] public unsafe fixed byte /* BossMetaloverloadPhase1SelfRecoverDebris[7] */ _debrisList[28];

        public unsafe BossMetaloverloadPhase1SelfRecoverDebris* debrisList
        {
            get
            {
                fixed (byte* p_debrisList = _debrisList)
                    return (BossMetaloverloadPhase1SelfRecoverDebris*)p_debrisList;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct BossMetaloverloadPhase1TimeStopParam
    {
        [FieldOffset(0x00)] public float bossKeepDistance;
        [FieldOffset(0x04)] public float photonDashBossKeepDistance;
        [FieldOffset(0x08)] public float photonDashBossKeepTime;
        [FieldOffset(0x0C)] public float photonDashDistanceOffset;
        [FieldOffset(0x10)] public float photonDashAttackAfterCameraStartTime;
        [FieldOffset(0x14)] public float photonDashAttackAfterCameraInvalidationTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x44)]
    public struct BossMetaloverloadPhase1DamageParam
    {
        [FieldOffset(0x00)] public float stunTime;
        [FieldOffset(0x04)] public float rushTime;
        [FieldOffset(0x08)] public float rushCameraDelayTime;
        [FieldOffset(0x0C)] public float damageAfterTime;
        [FieldOffset(0x10)] public float damageAfterDistance;
        [FieldOffset(0x14)] public int debrisBlowHitDamagePoint;
        [FieldOffset(0x18)] public int debrisSurfSpinBlowHitDamagePoint;
        [FieldOffset(0x1C)] public int mineBlowHitDamagePoint;
        [FieldOffset(0x20)] public float rushFinishDamageScale;
        [FieldOffset(0x24)] public int photonDashDamagePoint;
        [FieldOffset(0x28)] public float phaseChangeWaitTime;
        [FieldOffset(0x2C)] public float photonPhaseChangeWaitTime;
        [FieldOffset(0x30)] public float blowPower;
        [FieldOffset(0x34)] public float blowUpPower;
        [FieldOffset(0x38)] public float blowDeceleration;
        [FieldOffset(0x3C)] public float gravityPower;
        [FieldOffset(0x40)] public float blowEndHeight;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x04)]
    public struct BossMetaloverloadPhase1AttackChanceParam
    {
        [FieldOffset(0x00)] public float distanceOffset;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1E80)]
    public struct BossMetaloverloadPhase1Param
    {
        [FieldOffset(0x00)] public int useActTblHealthPoint2;
        [FieldOffset(0x04)] public sbyte laneNum;
        [FieldOffset(0x08)] public float laneWidth;
        [FieldOffset(0x0C)] public BossMetaloverloadPhase1AutorunParam autorun;
        [FieldOffset(0x40)] public BossBattleLockOnCameraParam mainCamera;
        [FieldOffset(0x60)] public BossPointCameraParam damageCamera;
        [FieldOffset(0x100)] public BossPointCameraParam bossLookAtCamera;
        [FieldOffset(0x1A0)] public BossMetaloverloadLockonCameraParam subCamera;
        [FieldOffset(0x1D0)] public BossMetaloverloadPhase1MissileParam missileParam;
        [FieldOffset(0x1B40)] public BossMetaloverloadPhase1TailParam tailParam;
        [FieldOffset(0x1B7C)] public BossMetaloverloadPhase1FlameParam flameParam;
        [FieldOffset(0x1B90)] public BossMetaloverloadPhase1SelfRecoverParam selfRecoverParam;
        [FieldOffset(0x1BE0)] public BossMetaloverloadPhase1TimeStopParam timeStopParam;
        [FieldOffset(0x1C00)] public BossPointCameraParam photonBeforeBossLookAtCamera;
        [FieldOffset(0x1CA0)] public BossPointCameraParam photonBossLookAtCamera;
        [FieldOffset(0x1D40)] public BossMetaloverloadPhase1DamageParam damageParam;
        [FieldOffset(0x1D84)] public BossMetaloverloadPhase1AttackChanceParam attackChanceParam;
        [FieldOffset(0x1D88)] public bool attackChanceBeforeBossLookAtCameraEneble;
        [FieldOffset(0x1D90)] public BossPointCameraParam attackChanceBeforeBossLookAtCamera;
        [FieldOffset(0x1E30)] public float startCaptionTime;
        [FieldOffset(0x1E38)] public UnmanagedString startCaptionLabel;
        [FieldOffset(0x1E48)] public float tutorialCaptionTime;
        [FieldOffset(0x1E50)] public UnmanagedString tutorialCaptionLabel;
        [FieldOffset(0x1E60)] public float chaosBreakCaptionTime;
        [FieldOffset(0x1E68)] public UnmanagedString chaosBreakCaptionLabel;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xE0)]
    public struct BossSVCameraParam
    {
        [FieldOffset(0x00)] public float fovy;
        [FieldOffset(0x04)] public float toPointDistanceMin;
        [FieldOffset(0x08)] public float toPointDistanceMax;
        [FieldOffset(0x0C)] public float distanceMin;
        [FieldOffset(0x10)] public float distanceMax;
        [FieldOffset(0x14)] public float gravityOffsetMin;
        [FieldOffset(0x18)] public float gravityOffsetMax;
        [FieldOffset(0x20)] public Vector3 playerOffsetMin;
        [FieldOffset(0x30)] public Vector3 playerOffsetMax;
        [FieldOffset(0x40)] public Vector3 worldOffsetMin;
        [FieldOffset(0x50)] public Vector3 worldOffsetMax;
        [FieldOffset(0x60)] public Vector3 pointLocalOffsetMin;
        [FieldOffset(0x70)] public Vector3 pointLocalOffsetMax;
        [FieldOffset(0x80)] public UnmanagedString nodeName;
        [FieldOffset(0x90)] public Vector3 pointLocalDir;
        [FieldOffset(0xA0)] public float baseDistance;
        [FieldOffset(0xA4)] public float addSideMoveLimitAngle;
        [FieldOffset(0xA8)] public float addSideMoveDistance;
        [FieldOffset(0xAC)] public float inputStickRotAngle;
        [FieldOffset(0xB0)] public float inputStickDistanceRatioMin;
        [FieldOffset(0xB4)] public float inputStickDistanceRatioMax;
        [FieldOffset(0xB8)] public float inputStickOffsetHeightMin;
        [FieldOffset(0xBC)] public float inputStickOffsetHeightMax;
        [FieldOffset(0xC0)] public float inputStickRollMin;
        [FieldOffset(0xC4)] public float inputStickRollMax;
        [FieldOffset(0xC8)] public float inputStickAddRatio;
        [FieldOffset(0xCC)] public float noInputStickAddRatio;
        [FieldOffset(0xD0)] public float inputStickDelay;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x34)]
    public struct BossMetaloverloadPhase2WaterFlowParam
    {
        [FieldOffset(0x00)] public sbyte laneNum;
        [FieldOffset(0x04)] public float minDistance;
        [FieldOffset(0x08)] public float maxDistance;
        [FieldOffset(0x0C)] public float svPathRadius;
        [FieldOffset(0x10)] public float speed;
        [FieldOffset(0x14)] public float suctionPowerRatio;
        [FieldOffset(0x18)] public float playerBackSpeed;
        [FieldOffset(0x1C)] public float moveDistance;
        [FieldOffset(0x20)] public bool moveUnlock;
        [FieldOffset(0x24)] public float bossRationAngleMin;
        [FieldOffset(0x28)] public float bossRationAngleMax;
        [FieldOffset(0x2C)] public float bossRationSpeedMin;
        [FieldOffset(0x30)] public float bossRationSpeedMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct BossMetaloverloadPhase2ThornballPatternData
    {
        [FieldOffset(0x00)] public float delay;
        [FieldOffset(0x04)] public float popAngle;
        [FieldOffset(0x08)] public float popInterval;
        [FieldOffset(0x0C)] public sbyte num;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x64)]
    public struct BossMetaloverloadPhase2ThornballParam
    {
        [FieldOffset(0x00)] public int blowHitDamagePoint;
        [FieldOffset(0x04)] public float moveTime;
        [FieldOffset(0x08)] public float blowSpeed;
        [FieldOffset(0x0C)] public float blowUpRatio;
        [FieldOffset(0x10)] public bool firstInputGuideDisplay;
        [FieldOffset(0x14)] public unsafe fixed byte /* BossMetaloverloadPhase2ThornballPatternData[5] */ _patterns[80];

        public unsafe BossMetaloverloadPhase2ThornballPatternData* patterns
        {
            get
            {
                fixed (byte* p_patterns = _patterns)
                    return (BossMetaloverloadPhase2ThornballPatternData*)p_patterns;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x24)]
    public struct BossMetaloverloadPhase2MoveRingPatternData
    {
        [FieldOffset(0x00)] public float delay;
        [FieldOffset(0x04)] public float popAngle;
        [FieldOffset(0x08)] public float popInterval;
        [FieldOffset(0x0C)] public sbyte num;
        [FieldOffset(0x10)] public float height;
        [FieldOffset(0x14)] public unsafe fixed float heightPatterns[4];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x94)]
    public struct BossMetaloverloadPhase2MoveRingParam
    {
        [FieldOffset(0x00)] public float moveTime;
        [FieldOffset(0x04)] public unsafe fixed byte /* BossMetaloverloadPhase2MoveRingPatternData[4] */ _patterns[144];

        public unsafe BossMetaloverloadPhase2MoveRingPatternData* patterns
        {
            get
            {
                fixed (byte* p_patterns = _patterns)
                    return (BossMetaloverloadPhase2MoveRingPatternData*)p_patterns;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct BossMetaloverloadPhase2MissileInfo
    {
        [FieldOffset(0x00)] public sbyte laneIndex;
        [FieldOffset(0x01)] public bool isLeft;
        [FieldOffset(0x04)] public float popTime;
        [FieldOffset(0x08)] public float height;
        [FieldOffset(0x0C)] public bool isInvincible;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x108)]
    public struct BossMetaloverloadPhase2MissilePatternData
    {
        [FieldOffset(0x00)] public float hpRatioMin;
        [FieldOffset(0x04)] public float hpRatioMax;
        [FieldOffset(0x08)] public unsafe fixed byte /* BossMetaloverloadPhase2MissileInfo[16] */ _infos[256];

        public unsafe BossMetaloverloadPhase2MissileInfo* infos
        {
            get
            {
                fixed (byte* p_infos = _infos)
                    return (BossMetaloverloadPhase2MissileInfo*)p_infos;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct BossMetaloverloadSVCameraExtensionParam
    {
        [FieldOffset(0x00)] public float addDistance;
        [FieldOffset(0x04)] public float addGravityOffset;
        [FieldOffset(0x10)] public Vector3 addPlayerOffset;
        [FieldOffset(0x20)] public Vector3 addWorldOffset;
        [FieldOffset(0x30)] public Vector3 addPointLocalOffset;
        [FieldOffset(0x40)] public float time;
        [FieldOffset(0x44)] public float easeIn;
        [FieldOffset(0x48)] public float easeOut;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x8D0)]
    public struct BossMetaloverloadPhase2MissileParam
    {
        [FieldOffset(0x00)] public int blowHitDamagePoint;
        [FieldOffset(0x04)] public float flySpeed;
        [FieldOffset(0x08)] public float flySpeedByHard;
        [FieldOffset(0x0C)] public float onWaterSpeed;
        [FieldOffset(0x10)] public float onWaterSpeedByHard;
        [FieldOffset(0x14)] public float shotAngle;
        [FieldOffset(0x18)] public float blowSpeed;
        [FieldOffset(0x1C)] public float blowUpRatio;
        [FieldOffset(0x20)] public float radius;
        [FieldOffset(0x24)] public float waitTime;
        [FieldOffset(0x28)] public float moveTime;
        [FieldOffset(0x2C)] public int spinBlowRingNum;
        [FieldOffset(0x30)] public bool firstInputGuideDisplay;
        [FieldOffset(0x34)] public unsafe fixed byte /* BossMetaloverloadPhase2MissilePatternData[4] */ _patterns[1056];

        public unsafe BossMetaloverloadPhase2MissilePatternData* patterns
        {
            get
            {
                fixed (byte* p_patterns = _patterns)
                    return (BossMetaloverloadPhase2MissilePatternData*)p_patterns;
            }
        }

        [FieldOffset(0x454)] public unsafe fixed byte /* BossMetaloverloadPhase2MissilePatternData[4] */ _patternsByHard[1056];

        public unsafe BossMetaloverloadPhase2MissilePatternData* patternsByHard
        {
            get
            {
                fixed (byte* p_patternsByHard = _patternsByHard)
                    return (BossMetaloverloadPhase2MissilePatternData*)p_patternsByHard;
            }
        }

        [FieldOffset(0x880)] public BossMetaloverloadSVCameraExtensionParam cameraEx;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct BossMetaloverloadPhase2ThrowingFocusCameraParam
    {
        [FieldOffset(0x00)] public float hitstopStartTime;
        [FieldOffset(0x04)] public float startTime;
        [FieldOffset(0x08)] public float easeOutTime;
        [FieldOffset(0x0C)] public float keepTime;
        [FieldOffset(0x10)] public Vector3 localOffsetDirection;
        [FieldOffset(0x20)] public float offsetDistance;
        [FieldOffset(0x24)] public float cancelDelay;
        [FieldOffset(0x30)] public Vector3 guideOffset;
        [FieldOffset(0x40)] public float targetOffsetHeight;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct BossMetaloverloadPhase2ThrowingBreakDebrisInfo
    {
        [FieldOffset(0x00)] public bool enable;
        [FieldOffset(0x10)] public Vector3 landingPos;
        [FieldOffset(0x20)] public float landingTime;
        [FieldOffset(0x24)] public float blowPower;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xC20)]
    public struct BossMetaloverloadPhase2ThrowingBreakDebrisParam
    {
        [FieldOffset(0x00)] public int tankBlowHitDamagePoint;
        [FieldOffset(0x04)] public int shipBlowHitDamagePoint;
        [FieldOffset(0x08)] public int tankBlowHitDamagePointByHard;
        [FieldOffset(0x0C)] public int shipBlowHitDamagePointByHard;
        [FieldOffset(0x10)] public float tankRadius;
        [FieldOffset(0x14)] public float shipRadius;
        [FieldOffset(0x18)] public float blowSpeed;
        [FieldOffset(0x1C)] public float blowUpRatio;
        [FieldOffset(0x20)] public unsafe fixed byte /* BossMetaloverloadPhase2ThrowingBreakDebrisInfo[16] */ _tankBreakDebris[768];

        public unsafe BossMetaloverloadPhase2ThrowingBreakDebrisInfo* tankBreakDebris
        {
            get
            {
                fixed (byte* p_tankBreakDebris = _tankBreakDebris)
                    return (BossMetaloverloadPhase2ThrowingBreakDebrisInfo*)p_tankBreakDebris;
            }
        }

        [FieldOffset(0x320)] public unsafe fixed byte /* BossMetaloverloadPhase2ThrowingBreakDebrisInfo[16] */ _shipBreakDebris[768];

        public unsafe BossMetaloverloadPhase2ThrowingBreakDebrisInfo* shipBreakDebris
        {
            get
            {
                fixed (byte* p_shipBreakDebris = _shipBreakDebris)
                    return (BossMetaloverloadPhase2ThrowingBreakDebrisInfo*)p_shipBreakDebris;
            }
        }

        [FieldOffset(0x620)] public unsafe fixed byte /* BossMetaloverloadPhase2ThrowingBreakDebrisInfo[16] */ _tankBreakDebrisByHard[768];

        public unsafe BossMetaloverloadPhase2ThrowingBreakDebrisInfo* tankBreakDebrisByHard
        {
            get
            {
                fixed (byte* p_tankBreakDebrisByHard = _tankBreakDebrisByHard)
                    return (BossMetaloverloadPhase2ThrowingBreakDebrisInfo*)p_tankBreakDebrisByHard;
            }
        }

        [FieldOffset(0x920)] public unsafe fixed byte /* BossMetaloverloadPhase2ThrowingBreakDebrisInfo[16] */ _shipBreakDebrisByHard[768];

        public unsafe BossMetaloverloadPhase2ThrowingBreakDebrisInfo* shipBreakDebrisByHard
        {
            get
            {
                fixed (byte* p_shipBreakDebrisByHard = _shipBreakDebrisByHard)
                    return (BossMetaloverloadPhase2ThrowingBreakDebrisInfo*)p_shipBreakDebrisByHard;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct BossMetaloverloadFixedCamera
    {
        [FieldOffset(0x00)] public Vector3 eyeLocalOffset;
        [FieldOffset(0x10)] public Vector3 lookAtLocalOffset;
        [FieldOffset(0x20)] public float fov;
        [FieldOffset(0x24)] public float roll;
        [FieldOffset(0x28)] public float easeInTime;
        [FieldOffset(0x2C)] public float easeOutTime;
        [FieldOffset(0x30)] public float keepTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xE50)]
    public struct BossMetaloverloadPhase2ThrowingParam
    {
        [FieldOffset(0x00)] public int tankHp;
        [FieldOffset(0x04)] public float tankWaterline;
        [FieldOffset(0x10)] public Vector3 tankStartVelocity;
        [FieldOffset(0x20)] public float tankEndWaitTimeByOutOfRange;
        [FieldOffset(0x24)] public float tankEndWaitTimeByBreak;
        [FieldOffset(0x28)] public float tankMoveTime;
        [FieldOffset(0x2C)] public int tankKnokbackRingNum;
        [FieldOffset(0x30)] public int tankNormalBreakRingNum;
        [FieldOffset(0x34)] public int tankTimeStopBreakRingNum;
        [FieldOffset(0x38)] public int shipHp;
        [FieldOffset(0x3C)] public int shipTimeStopRefDebrisNum;
        [FieldOffset(0x40)] public int shipTimeStopRefDebrisDamage;
        [FieldOffset(0x44)] public int shipTimeStopRefDebrisNumByHard;
        [FieldOffset(0x48)] public int shipTimeStopRefDebrisDamageByHard;
        [FieldOffset(0x4C)] public float shipThrowingDecleSpeedRatio;
        [FieldOffset(0x50)] public float shipThrowingDecleTime;
        [FieldOffset(0x54)] public float shipThrowingDecleDelay;
        [FieldOffset(0x60)] public Vector3 shipStartVelocity;
        [FieldOffset(0x70)] public float shipLandingVelocityXZ;
        [FieldOffset(0x74)] public float shipLandingVelocityY;
        [FieldOffset(0x78)] public float shipLandingPosOffsetXZ;
        [FieldOffset(0x7C)] public float shipLandingPosOffsetSide;
        [FieldOffset(0x80)] public float shipEndWaitTimeByOutOfRange;
        [FieldOffset(0x84)] public float shipEndWaitTimeByBreak;
        [FieldOffset(0x88)] public int shipNormalBreakRingNum;
        [FieldOffset(0x8C)] public int shipTimeStopBreakRingNum;
        [FieldOffset(0x90)] public BossMetaloverloadSVCameraExtensionParam tankCameraEx;
        [FieldOffset(0xE0)] public BossMetaloverloadSVCameraExtensionParam tankBreakCameraEx;
        [FieldOffset(0x130)] public BossMetaloverloadPhase2ThrowingFocusCameraParam camera;
        [FieldOffset(0x180)] public BossMetaloverloadSVCameraExtensionParam shipBreakCameraEx;
        [FieldOffset(0x1D0)] public BossMetaloverloadPhase2ThrowingBreakDebrisParam debris;
        [FieldOffset(0xDF0)] public unsafe fixed bool shipTargetEnables[6];
        [FieldOffset(0xDF8)] public float underwaterAnimRatio;
        [FieldOffset(0xE00)] public BossMetaloverloadFixedCamera shipThrowingCamera;
        [FieldOffset(0xE40)] public float shipThrowingCameraDelay;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x90)]
    public struct BossMetaloverloadPhase2ShotParam
    {
        [FieldOffset(0x00)] public int reflectMaxCount;
        [FieldOffset(0x04)] public int reflectMaxCountByHard;
        [FieldOffset(0x08)] public int blowHitDamagePoint;
        [FieldOffset(0x0C)] public float speed;
        [FieldOffset(0x10)] public float shotOffset;
        [FieldOffset(0x14)] public float addSpeedBoss;
        [FieldOffset(0x18)] public float addSpeedBossByHard;
        [FieldOffset(0x1C)] public float addSpeedPlyer;
        [FieldOffset(0x20)] public float scale;
        [FieldOffset(0x24)] public float homingParam;
        [FieldOffset(0x28)] public int knokbackRingNum;
        [FieldOffset(0x2C)] public int breakRingNum;
        [FieldOffset(0x30)] public bool firstInputGuideDisplay;
        [FieldOffset(0x40)] public BossMetaloverloadSVCameraExtensionParam cameraEx;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1A60)]
    public struct BossMetaloverloadPhase2Param
    {
        [FieldOffset(0x00)] public BossSVCameraParam mainCamera;
        [FieldOffset(0xE0)] public BossMetaloverloadPhase2WaterFlowParam waterFlow;
        [FieldOffset(0x114)] public BossMetaloverloadPhase2ThornballParam thornball;
        [FieldOffset(0x178)] public BossMetaloverloadPhase2MoveRingParam thornballEx;
        [FieldOffset(0x210)] public BossMetaloverloadPhase2MissileParam missile;
        [FieldOffset(0xAE0)] public BossMetaloverloadPhase2ThrowingParam throwing;
        [FieldOffset(0x1930)] public BossMetaloverloadPhase2ShotParam shot;
        [FieldOffset(0x19C0)] public BossMetaloverloadPhase2MoveRingParam ring;
        [FieldOffset(0x1A54)] public int bigDamageRaction;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x6210)]
    public struct BossMetaloverloadConfig
    {
        [FieldOffset(0x00)] public BossMetaloverloadCommonParam commonParam;
        [FieldOffset(0x710)] public unsafe fixed byte /* BossMetaloverloadPhaseParam[2] */ _phaseParam[8728];

        public unsafe BossMetaloverloadPhaseParam* phaseParam
        {
            get
            {
                fixed (byte* p_phaseParam = _phaseParam)
                    return (BossMetaloverloadPhaseParam*)p_phaseParam;
            }
        }

        [FieldOffset(0x2930)] public BossMetaloverloadPhase1Param phase1;
        [FieldOffset(0x47B0)] public BossMetaloverloadPhase2Param phase2;
    }

}