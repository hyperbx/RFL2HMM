Library "CameraShakeTable"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum ShakeType : byte
    {
        Directional = 0,
        WorldY = 1,
        Random = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct CameraShakeRecord
    {
        [FieldOffset(0x00)] public UnmanagedString name;
        [FieldOffset(0x10)] public ShakeType type;
        [FieldOffset(0x14)] public float zRot;
        [FieldOffset(0x18)] public float duration;
        [FieldOffset(0x1C)] public float frequency;
        [FieldOffset(0x20)] public float amplitude;
        [FieldOffset(0x24)] public float timeAttenuationRate;
        [FieldOffset(0x28)] public bool enableDistanceAttenuation;
        [FieldOffset(0x2C)] public float attenuationDistance;
    }

    public enum EventCameraShakeRecord_ShakeType : byte
    {
        LocalX = 0,
        LocalY = 1,
        LocalZ = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct EventCameraShakeRecord
    {
        [FieldOffset(0x00)] public UnmanagedString name;
        [FieldOffset(0x10)] public EventCameraShakeRecord_ShakeType type;
        [FieldOffset(0x14)] public float duration;
        [FieldOffset(0x18)] public float scale;
        [FieldOffset(0x1C)] public float speed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xEE0)]
    public struct CameraShakeTable
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* CameraShakeRecord[74] */ _records[3552];

        public unsafe CameraShakeRecord* records
        {
            get
            {
                fixed (byte* p_records = _records)
                    return (CameraShakeRecord*)p_records;
            }
        }

        [FieldOffset(0xDE0)] public unsafe fixed byte /* EventCameraShakeRecord[8] */ _eventRecords[256];

        public unsafe EventCameraShakeRecord* eventRecords
        {
            get
            {
                fixed (byte* p_eventRecords = _eventRecords)
                    return (EventCameraShakeRecord*)p_eventRecords;
            }
        }
    }

}