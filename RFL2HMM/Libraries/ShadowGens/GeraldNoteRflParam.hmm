Library "GeraldNoteRflParam"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x18)]
    public struct PathData
    {
        [FieldOffset(0x00)] public UnmanagedString pathName;
        [FieldOffset(0x10)] public float moveSpeed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct FixedNoteData
    {
        [FieldOffset(0x00)] public UnmanagedString pathName;
        [FieldOffset(0x10)] public int id;
        [FieldOffset(0x14)] public float moveSpeed;
        [FieldOffset(0x18)] public float respawnTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x110)]
    public struct GeraldNoteRflParam
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* PathData[3] */ _pathList[72];

        public unsafe PathData* pathList
        {
            get
            {
                fixed (byte* p_pathList = _pathList)
                    return (PathData*)p_pathList;
            }
        }

        [FieldOffset(0x48)] public unsafe fixed int idlist[8];
        [FieldOffset(0x68)] public float respawnTime;
        [FieldOffset(0x70)] public unsafe fixed byte /* FixedNoteData[3] */ _fixedData[96];

        public unsafe FixedNoteData* fixedData
        {
            get
            {
                fixed (byte* p_fixedData = _fixedData)
                    return (FixedNoteData*)p_fixedData;
            }
        }

        [FieldOffset(0xD0)] public unsafe fixed byte /* FixedNoteData[2] */ _eclipsFixedData[64];

        public unsafe FixedNoteData* eclipsFixedData
        {
            get
            {
                fixed (byte* p_eclipsFixedData = _eclipsFixedData)
                    return (FixedNoteData*)p_eclipsFixedData;
            }
        }
    }

}