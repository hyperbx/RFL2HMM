Library "OcclusionCapsuleList"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum VolumeType : sbyte
    {
        VOLUME_SPHERE = 0,
        VOLUME_CAPSULE = 1
    }

    public enum LODLevel : sbyte
    {
        LOD_HIGH = 0,
        LOD_MIDDLE = 1,
        LOD_LOW = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x70)]
    public struct CapsuleParam
    {
        [FieldOffset(0x00)] public UnmanagedString type;
        [FieldOffset(0x10)] public VolumeType volume;
        [FieldOffset(0x14)] public int priority;
        [FieldOffset(0x20)] public Vector3 translation;
        [FieldOffset(0x30)] public Vector3 rotation;
        [FieldOffset(0x40)] public Vector3 scale;
        [FieldOffset(0x50)] public Vector3 rate;
        [FieldOffset(0x60)] public float radius;
        [FieldOffset(0x64)] public LODLevel lod;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C00)]
    public struct OcclusionCapsuleList
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* CapsuleParam[64] */ _capsules[7168];

        public unsafe CapsuleParam* capsules
        {
            get
            {
                fixed (byte* p_capsules = _capsules)
                    return (CapsuleParam*)p_capsules;
            }
        }
    }

}