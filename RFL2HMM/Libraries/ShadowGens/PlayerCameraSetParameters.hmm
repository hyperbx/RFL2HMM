Library "PlayerCameraSetParameters"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum CameraType : byte
    {
        None = 0,
        Fixed = 1,
        Offset = 2,
        Follow = 3,
        Pan = 4,
        StaticPan = 5,
        PanUpByFront = 6
    }

    public enum CameraCoordType : byte
    {
        Orthgonal = 0,
        Spherical = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x70)]
    public struct PlayerCameraParameter
    {
        [FieldOffset(0x00)] public CameraType type;
        [FieldOffset(0x04)] public float time;
        [FieldOffset(0x08)] public float easeinTime;
        [FieldOffset(0x0C)] public CameraCoordType lookAtCoord;
        [FieldOffset(0x10)] public Vector3 localLookAtOffset;
        [FieldOffset(0x20)] public Vector3 worldLookAtOffset;
        [FieldOffset(0x30)] public CameraCoordType eyeCoord;
        [FieldOffset(0x40)] public Vector3 localEyeOffset;
        [FieldOffset(0x50)] public Vector3 worldEyeOffset;
        [FieldOffset(0x60)] public float roll;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3A0)]
    public struct PlayerCameraSetParameter
    {
        [FieldOffset(0x00)] public UnmanagedString name;
        [FieldOffset(0x10)] public float easeoutTime;
        [FieldOffset(0x20)] public unsafe fixed byte /* PlayerCameraParameter[8] */ _param[896];

        public unsafe PlayerCameraParameter* param
        {
            get
            {
                fixed (byte* p_param = _param)
                    return (PlayerCameraParameter*)p_param;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA320)]
    public struct PlayerCameraSetParameters
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* PlayerCameraSetParameter[45] */ _data[41760];

        public unsafe PlayerCameraSetParameter* data
        {
            get
            {
                fixed (byte* p_data = _data)
                    return (PlayerCameraSetParameter*)p_data;
            }
        }
    }

}