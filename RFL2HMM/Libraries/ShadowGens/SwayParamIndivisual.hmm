Library "SwayParamIndivisual"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x40)]
    public struct SwayParamNode
    {
        [FieldOffset(0x00)] public bool enable;
        [FieldOffset(0x04)] public float gravity;
        [FieldOffset(0x08)] public float resist;
        [FieldOffset(0x0C)] public float resist_decay;
        [FieldOffset(0x10)] public float recover;
        [FieldOffset(0x14)] public float recover_decay;
        [FieldOffset(0x18)] public float spring;
        [FieldOffset(0x1C)] public float radius;
        [FieldOffset(0x20)] public float transmit;
        [FieldOffset(0x24)] public float inertia;
        [FieldOffset(0x28)] public float angle_limit;
        [FieldOffset(0x30)] public UnmanagedString nodeName;
    }

    public enum CollisionType : sbyte
    {
        SWAY_COLLISTION_TYPE_NONE = 0,
        SWAY_COLLISTION_TYPE_SPHERE = 1
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x60)]
    public struct SwayParamCollision
    {
        [FieldOffset(0x00)] public CollisionType type;
        [FieldOffset(0x10)] public Vector3 translation;
        [FieldOffset(0x20)] public Vector3 rotation;
        [FieldOffset(0x30)] public Vector3 scale;
        [FieldOffset(0x40)] public int modelPartId;
        [FieldOffset(0x48)] public UnmanagedString modelNodeName;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x300)]
    public struct SwayParamNodeCollision
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* SwayParamCollision[8] */ _collisionParam[768];

        public unsafe SwayParamCollision* collisionParam
        {
            get
            {
                fixed (byte* p_collisionParam = _collisionParam)
                    return (SwayParamCollision*)p_collisionParam;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3410)]
    public struct SwayParamIndivisual
    {
        [FieldOffset(0x00)] public UnmanagedString idName;
        [FieldOffset(0x10)] public unsafe fixed byte /* SwayParamNode[16] */ _nodeParam[1024];

        public unsafe SwayParamNode* nodeParam
        {
            get
            {
                fixed (byte* p_nodeParam = _nodeParam)
                    return (SwayParamNode*)p_nodeParam;
            }
        }

        [FieldOffset(0x410)] public unsafe fixed byte /* SwayParamNodeCollision[16] */ _collisionParam[12288];

        public unsafe SwayParamNodeCollision* collisionParam
        {
            get
            {
                fixed (byte* p_collisionParam = _collisionParam)
                    return (SwayParamNodeCollision*)p_collisionParam;
            }
        }
    }

}